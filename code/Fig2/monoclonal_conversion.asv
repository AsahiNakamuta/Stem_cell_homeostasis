tic
clear variables
clc


%lists of proliferation rate
epsilon_list = [0 0.01 0.1 1 1];
lambda_list  = [1 1 1 1 0];

%number of simulation trials for each parameter set
m = 1000;
%number of clones (K in manuscript)
num_of_clones=10;
%number of competitive stem cells in the open layer (N in manuscript)
n_openniche = 100;
%list of number of iteration
iter_list = 500*(n_openniche*lambda_list + num_of_clones*epsilon_list);

%time-series data of the clone #1
x_clone1 = zeros(length(epsilon_list), m, max(iter_list));

for i_para = 1:length(epsilon_list)
    %matrix containing time series data
    x_matrix=zeros(num_of_clones,iter_list(i_para));
    %proliferation rate of matster stem cells
    epsilon=epsilon_list(i_para);
    %proliferation rate of competitive stem cells
    lambda=lambda_list(i_para);
    
    for j = 1:m
        %initional condition
        init_size = floor(n_openniche/num_of_clones);
        x_matrix(:,1) = init_size*ones(num_of_clones,1);
        x_matrix(1:n_openniche-init_size*num_of_clones,1) = x_matrix(1:n_openniche-init_size*num_of_clones,1) + 1;

        rand_num0 = rand;
        if rand_num0 <= 1/(init_size+1)    %%%% rand_num0 <= 1/(init_size+1) corresponds random label. 0 corresponds label on competitive cells. 1 corresponds label on master stem cell.
            x_matrix(2,1)=x_matrix(2,1) + x_matrix(1,1);
            x_matrix(1,1)=0;
        else
            x_matrix(2,1)=x_matrix(2,1) + x_matrix(1,1) - 1;
            x_matrix(1,1)=1;
        end

        %time evolution
        for i=1:iter_list(i_para)-1
            
            x_temp=x_matrix(:,i);
        %lists of the probabilities that each clone will be selected for proliferation/differentiation.
            if rand_num0 <= 1/(init_size+1)    %%%% rand_num0 <= 1/(init_size+1) corresponds random label. 0 corresponds label on competitive cells. 1 corresponds label on master stem cell.
                f_pro_list=(lambda*x_temp+epsilon)/(lambda*n_openniche+num_of_clones*epsilon);
            else
                f_pro_list=(lambda*x_temp+epsilon)/(num_of_clones*(lambda*init_size+epsilon)-epsilon);
                f_pro_list(1)=lambda*x_temp(1)/(num_of_clones*(lambda*init_size)-epsilon);
            end
            f_diff_list=x_temp/n_openniche;
        %choose one clone to proliferate
            threshold_pro_list=zeros(num_of_clones-1,1);
            threshold_pro_list(1)=f_pro_list(1);
            
            for k=2:num_of_clones-1
                threshold_pro_list(k)=threshold_pro_list(k-1)+f_pro_list(k);
            end
            
            rand_num1=rand;
            pro_type=sum(threshold_pro_list<=rand_num1)+1;
            
            x_temp(pro_type)=x_temp(pro_type)+1;
        %choose one clone to differenciate
            threshold_diff_list=zeros(num_of_clones-1,1);
            threshold_diff_list(1)=f_diff_list(1);
            
            for k=2:num_of_clones-1
                threshold_diff_list(k)=threshold_diff_list(k-1)+f_diff_list(k);
            end
            
            rand_num2=rand;
            diff_type=sum(threshold_diff_list<=rand_num2)+1;
            
            x_temp(diff_type)=x_temp(diff_type)-1;
            
            x_matrix(:,i+1)=x_temp;
            
        end
        x_clone1(i_para,j,1:iter_list(i_para)) = x_matrix(1,:);
    end
end
save("timeseries_monoclonalconversion","x_clone1","-v7.3")